{"version":3,"sources":["components/navigation/index.js","components/layout/Sidebar.js","components/layout/PageContainer.js","components/layout/Header.js","components/layout/PageTitle.js","components/layout/Trademark.js","components/pages/NotFound.js","components/pages/Home.js","components/inputs/TextInput.js","components/pages/QrGeneration.js","App.js","serviceWorker.js","index.js"],"names":["Router","children","basepath","Link","to","props","path","Sidebar","className","PageContainer","Header","PageTitle","title","description","Trademark","text","NotFound","Home","TextInput","type","generateDataUrl","a","QRCode","toDataURL","QrGeneration","useState","textToEncode","setTextToEncode","imageData","setImageData","delayedGenerate","useCallback","debounce","inputChanged","event","target","value","onChange","src","alt","App","default","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAKMA,EAAS,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACf,OACE,kBAAC,IAAD,CAAaC,SAJD,cAKTD,IAKDE,EAAO,SAAC,GAAmC,IAAD,IAAjCC,UAAiC,MAA5B,GAA4B,EAAxBH,EAAwB,EAAxBA,SAAaI,EAAW,iCACxCC,EAAI,UAXI,cAWJ,OAAqBF,EAAG,IAAY,MAARA,EAAG,GAAU,IAAI,IAA7C,OAAkDA,GAC5D,OACE,kBAAC,IAAD,iBAAeC,EAAf,CAAsBD,GAAIE,IACvBL,ICFQM,EAbC,SAAC,GAAgB,IAAfN,EAAc,EAAdA,SAChB,OACE,yBAAKO,UAAU,iBACb,mDAGA,6BACGP,KCCMQ,EARO,SAAC,GAAgB,IAAfR,EAAc,EAAdA,SACtB,OACE,0BAAMO,UAAU,aACbP,ICGQS,EANA,WACb,OACE,sDCOWC,EATG,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACzB,OACE,6BACE,4BAAKD,GACL,2BAAIC,KCIKC,EARG,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAClB,OACE,yBAAKP,UAAU,2DACZO,ICKQC,EARE,WACf,OACE,wCCMWC,EARF,WACX,OACE,+B,iECIWC,EANG,SAAC,GAAgB,IAAZb,EAAW,oBAChC,OACE,yCAAOc,KAAK,OAAOX,UAAU,sDAAyDH,KCIpFe,EAAe,uCAAG,WAAML,GAAN,SAAAM,EAAA,yDACjBN,EADiB,yCACJ,IADI,uBAETO,IAAOC,UAAUR,GAFR,mFAAH,sDAiCNS,EA7BM,WAAO,IAAD,EACeC,mBAAS,IADxB,mBAClBC,EADkB,KACJC,EADI,OAESF,mBAAS,IAFlB,mBAElBG,EAFkB,KAEPC,EAFO,KAInBC,EAAkBC,sBAAYC,IAAQ,uCAAC,WAAMjB,GAAN,SAAAM,EAAA,kEAC3CQ,EAD2C,SACxBT,EAAgBL,GADQ,6EAAD,sDAEzC,KAAM,IAEHkB,EAAY,uCAAG,WAAOC,GAAP,SAAAb,EAAA,sDACnBM,EAAgBO,EAAMC,OAAOC,OAC7BN,EAAgBI,EAAMC,OAAOC,OAFV,2CAAH,sDAKlB,OACE,yBAAK5B,UAAU,iBACb,kBAAC,EAAD,CAAWI,MAAM,sBACjB,yBAAKJ,UAAU,QACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,CAAW6B,SAAUJ,EAAcG,MAAOV,KAE5C,6BACGE,GAAa,yBAAKU,IAAKV,EAAWW,IAAG,iBAAYb,OAGtD,kBAAC,EAAD,CAAYX,KAAK,6ECVRyB,MApBf,WACE,OACE,yBAAKhC,UAAU,mCACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACb,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAMJ,GAAG,kBAAT,uBAEF,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAME,KAAK,MACX,kBAAC,EAAD,CAAcA,KAAK,mBACnB,kBAAC,EAAD,CAAUmC,SAAO,SCNTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a3c43ab4.chunk.js","sourcesContent":["import React from 'react';\nimport { Router as ReachRouter, Link as ReachLink} from '@reach/router'\n\nconst BASE_PATH='/dev-tools'\n\nconst Router = ({children}) => {\n  return (\n    <ReachRouter basepath={BASE_PATH} >\n      {children}\n    </ReachRouter>\n  )\n}\n\nconst Link = ({to = '', children, ...props}) => {\n  const path = `${BASE_PATH}${(!!to[0]&&to[0]!=='/')?'/':''}${to}`\n  return (\n    <ReachLink {...props} to={path}>\n      {children}\n    </ReachLink>\n  )\n}\n\nexport { Router, Link }","import React from 'react'\n\nconst Sidebar = ({children}) => {\n  return (\n    <nav className='w-56 min-w-56'>\n      <header >\n        Available tools\n      </header>\n      <div>\n        {children}\n      </div>\n    </nav>\n  )\n}\n\nexport default Sidebar;","import React from 'react'\n\nconst PageContainer = ({children}) => {\n  return (\n    <main className='container'>\n      {children}\n    </main>\n  )\n}\n\nexport default PageContainer;","import React from 'react'\n\nconst Header = () => {\n  return (\n    <div>Tools for developers</div>\n  )\n}\n\nexport default Header;","import React from 'react'\n\nconst PageTitle = ({title, description}) => {\n  return (\n    <div>\n      <h2>{title}</h2>\n      <p>{description}</p>\n    </div>\n  )\n}\n\nexport default PageTitle","import React from 'react'\n\nconst Trademark = ({text}) => {\n  return (\n    <div className='text-sm antialiased text-gray-500 container text-center'>\n      {text}\n    </div>\n  )\n}\n\nexport default Trademark","import React from 'react'\n\nconst NotFound = () => {\n  return (\n    <div>\n      404 :(\n    </div>\n  )\n}\n\nexport default NotFound","import React from 'react'\n\nconst Home = () => {\n  return (\n    <div>\n      \n    </div>\n  )\n}\n\nexport default Home","import React from 'react'\n\nconst TextInput = ({...props}) => {\n  return (\n    <input type='text' className='border rounded-sm border-solid border-gray-300 p-1' {...props} />\n  )\n}\n\nexport default TextInput","import React, {useState, useCallback } from 'react'\n\nimport debounce from 'lodash/debounce'\nimport QRCode from 'qrcode'\n\nimport { TextInput } from 'components/inputs'\nimport { PageTitle, Tradermark } from 'components/layout'\n\nconst generateDataUrl = async text => {\n  if (!text) return '';\n  return await QRCode.toDataURL(text)\n}\nconst QrGeneration = () => {\n  const [textToEncode, setTextToEncode] = useState('')\n  const [imageData, setImageData] = useState('')\n\n  const delayedGenerate = useCallback(debounce(async text => {\n    setImageData(await generateDataUrl(text))\n  }, 200), [])\n\n  const inputChanged = async (event) => {\n    setTextToEncode(event.target.value)\n    delayedGenerate(event.target.value)\n  }\n\n  return (\n    <div className='flex flex-col'>\n      <PageTitle title='QR Code Generator' />\n      <div className='flex'>\n        <div className='w-9/12'>\n          <TextInput onChange={inputChanged} value={textToEncode} />\n        </div>\n        <div>\n          {imageData && <img src={imageData} alt={`QR for ${textToEncode}`} />}\n        </div>\n      </div>\n      <Tradermark text='The word \"QR Code\" is registered trademark of: DENSO WAVE INCORPORATED' />\n    </div>\n  )\n}\n\nexport default QrGeneration","import React from 'react';\n\nimport { Router, Link } from 'components/navigation'\nimport { Sidebar, PageContainer, Header } from 'components/layout'\nimport { NotFound, Home, QrGeneration } from 'components/pages'\n\nfunction App() {\n  return (\n    <div className='container mx-auto flex flex-col'>\n      <Header />\n      <div className='flex'>\n        <Sidebar>\n          <Link to='/qr-generation' >QR Code generation</Link>\n        </Sidebar>\n        <PageContainer>\n          <Router>\n            <Home path='/'/>\n            <QrGeneration path='/qr-generation'/>\n            <NotFound default />\n          </Router>\n        </PageContainer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}